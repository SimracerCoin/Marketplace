{
  "address": "0x1Eff360828c4bB7F9dC7Ebf0A03BfD523257F71d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "payable_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedDataKey",
          "type": "bytes"
        }
      ],
      "name": "PurchaseAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSuccess",
          "type": "bool"
        }
      ],
      "name": "PurchaseFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "buyerKey",
          "type": "bytes"
        }
      ],
      "name": "PurchaseRequested",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_encryptedDataKey",
          "type": "bytes"
        }
      ],
      "name": "acceptPurchase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_notificationId",
          "type": "uint256"
        }
      ],
      "name": "archiveNotification",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isSuccess",
          "type": "bool"
        }
      ],
      "name": "finalizePurchase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_adId",
          "type": "uint256"
        }
      ],
      "name": "getAd",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "dataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "encryptedDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "ipfsPath",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "testTemplateHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ContentMarketplace.Advertisement",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_adIds",
          "type": "uint256[]"
        }
      ],
      "name": "getAds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "dataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "encryptedDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "ipfsPath",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "testTemplateHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ContentMarketplace.Advertisement[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_notificationIds",
          "type": "uint256[]"
        }
      ],
      "name": "getNotifications",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "purchaseId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "message",
              "type": "string"
            },
            {
              "internalType": "enum ContentMarketplace.NotificationType",
              "name": "nType",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "archive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "date",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "internalType": "struct ContentMarketplace.Notification[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseId",
          "type": "uint256"
        }
      ],
      "name": "getPurchase",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "adId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "buyerKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "encryptedDataKey",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "date",
              "type": "uint256"
            }
          ],
          "internalType": "struct ContentMarketplace.Purchase",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_purchaseIds",
          "type": "uint256[]"
        }
      ],
      "name": "getPurchases",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "adId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "buyerKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "encryptedDataKey",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "date",
              "type": "uint256"
            }
          ],
          "internalType": "struct ContentMarketplace.Purchase[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        }
      ],
      "name": "listAdsPerSeller",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "listNotificationsPerUser",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "adPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_adId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_buyerKey",
          "type": "bytes"
        }
      ],
      "name": "requestPurchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "purchaseId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x82add3000f7dedd55a94b6417a913da0bcbbc8040790dd1858a32045e42d28cb",
  "receipt": {
    "to": null,
    "from": "0x888c5F8560e022eA5f64292eA733462405B69Af3",
    "contractAddress": "0x1Eff360828c4bB7F9dC7Ebf0A03BfD523257F71d",
    "transactionIndex": 53,
    "gasUsed": "1498850",
    "logsBloom": "0x
    "blockHash": "0x7a8cb9c9544b7c72ac8879720003dd86f16179f2340da0493ca60fe33a38fe90",
    "transactionHash": "0x82add3000f7dedd55a94b6417a913da0bcbbc8040790dd1858a32045e42d28cb",
    "logs": [
      {
        "transactionIndex": 53,
        "blockNumber": 31136739,
        "transactionHash": "0x82add3000f7dedd55a94b6417a913da0bcbbc8040790dd1858a32045e42d28cb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000888c5f8560e022ea5f64292ea733462405b69af3",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000a61c6857b71a6a00000000000000000000000000000000000000000000000085bdd53bcfee7d3c000000000000000000000000000000000000000000014839be6c9133cfb801d00000000000000000000000000000000000000000000000008517b8d3783762d2000000000000000000000000000000000000000000014839bf12ad9c276f1c3a",
        "logIndex": 257,
        "blockHash": "0x7a8cb9c9544b7c72ac8879720003dd86f16179f2340da0493ca60fe33a38fe90"
      }
    ],
    "blockNumber": 31136739,
    "cumulativeGasUsed": "12169322",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf0c3C4AC63Be272a94712bCcc39490A159Cd0D7C"
  ],
  "solcInputHash": "615c5a632bac9805ab8069148bdbf8c8",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payable_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedDataKey\",\"type\":\"bytes\"}],\"name\":\"PurchaseAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSuccess\",\"type\":\"bool\"}],\"name\":\"PurchaseFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"buyerKey\",\"type\":\"bytes\"}],\"name\":\"PurchaseRequested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_encryptedDataKey\",\"type\":\"bytes\"}],\"name\":\"acceptPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_notificationId\",\"type\":\"uint256\"}],\"name\":\"archiveNotification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSuccess\",\"type\":\"bool\"}],\"name\":\"finalizePurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_adId\",\"type\":\"uint256\"}],\"name\":\"getAd\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"ipfsPath\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"testTemplateHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ContentMarketplace.Advertisement\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_adIds\",\"type\":\"uint256[]\"}],\"name\":\"getAds\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"ipfsPath\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"testTemplateHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ContentMarketplace.Advertisement[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_notificationIds\",\"type\":\"uint256[]\"}],\"name\":\"getNotifications\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"enum ContentMarketplace.NotificationType\",\"name\":\"nType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"archive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct ContentMarketplace.Notification[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseId\",\"type\":\"uint256\"}],\"name\":\"getPurchase\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"buyerKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedDataKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"internalType\":\"struct ContentMarketplace.Purchase\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_purchaseIds\",\"type\":\"uint256[]\"}],\"name\":\"getPurchases\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"buyerKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedDataKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"internalType\":\"struct ContentMarketplace.Purchase[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"listAdsPerSeller\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"listNotificationsPerUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"adPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_buyerKey\",\"type\":\"bytes\"}],\"name\":\"requestPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptPurchase(uint256,bytes)\":{\"notice\":\"called by seller to accept a purchase request for a registered advertisement\"},\"constructor\":{\"notice\":\"constructor(address descartesAddress) { // TODO retrieve Descartes interface from the address descartes = DescartesInterface(descartesAddress); } \"},\"finalizePurchase(uint256,bool)\":{\"notice\":\"finalizes purchase, unlocking buyer's funds and seller's deposit as appropriate\"},\"getAd(uint256)\":{\"notice\":\"retrieves an advertisement given its identifier\"},\"getAds(uint256[])\":{\"notice\":\"retrieves an array of advertisements given their identifiers\"},\"getNotifications(uint256[])\":{\"notice\":\"retrieves an array of notifications given their identifiers\"},\"getPurchase(uint256)\":{\"notice\":\"retrieves a purchase given its identifier\"},\"getPurchases(uint256[])\":{\"notice\":\"retrieves an advertisement given its identifier\"},\"listAdsPerSeller(address)\":{\"notice\":\"returns identifiers for a seller's advertisements\"},\"listNotificationsPerUser(address)\":{\"notice\":\"returns identifiers for a seller's notifications\"},\"requestPurchase(uint256,uint256,bytes)\":{\"notice\":\"requests purchase of a registered advertisement\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"cache/solpp-generated-contracts/ContentMarketplace.sol\":\"ContentMarketplace\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":110},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xaeb6a782d9ae2dd3b4070369ffb74c7503e17b00f478bf184a8db2ab9654a527\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\",\"license\":\"MIT\"},\"cache/solpp-generated-contracts/ContentMarketplace.sol\":{\"content\":\"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n\\n\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n//import \\\"@cartesi/descartes-sdk/contracts/DescartesInterface.sol\\\";\\n\\n// NOTE IF building on Remix use the same solidity version of openzeppelin, that is here on the package.json\\n// 3.1.0-solc-0.7 this is to avoid issues with versions/deprecated/change functions, etc:;\\n// import \\\"@openzeppelin/contracts@3.1.0-solc-0.7/token/ERC20/ERC20.sol\\\";\\n\\ncontract ContentMarketplace {\\n\\n    //DescartesInterface descartes;\\n    ERC20 SIMRACERCOIN;\\n\\n    /// @notice records necessary information for an advertisement\\n    struct Advertisement {\\n        address payable seller;       // seller address\\n        uint256 price;                // trade price\\n        bytes32 dataHash;             // merkle hash of unencrypted data\\n        bytes32 encryptedDataHash;    // merkle hash of encrypted data\\n        bytes ipfsPath;               // ipfs path of encrypted data\\n        bytes32 testTemplateHash;     // hash of the machine representing the test procedure for decrypted data\\n    }\\n\\n    /// @notice records information regarding a purchase\\n    struct Purchase {\\n        uint256 adId;\\n        address payable buyer;\\n        bytes buyerKey;\\n        bytes encryptedDataKey;\\n        //uint256 descartesIndex;  // descartes computation that will verify the challenge\\n        uint256 date;            // purchase date\\n    }\\n\\n    enum NotificationType { Request, Accept_A, Challenge, Accept_B, Reject }\\n    // @notice full representation of a notification\\n    struct Notification {\\n        uint256 purchaseId;       // purchase information\\n        string message;           // generic message\\n        NotificationType nType;   // type of notification\\n        bool archive;             // archived notification\\n        uint256 date;             // notification date\\n        address sender;           // notification from address\\n        address receiver;         // notification to address\\n    }\\n\\n    // storage of advertisements\\n    uint256 numAds = 0;\\n    mapping(uint256 => Advertisement) internal ads;\\n    mapping(address => uint256[]) internal adsPerSeller;\\n\\n    // storage of purchases\\n    uint256 numPurchases = 0;\\n    mapping(uint256 => Purchase) internal purchases;\\n    mapping(uint256 => uint256[]) internal purchasesPerAd;\\n\\n    // storage of notifications\\n    uint256 numNotifications = 0;\\n    mapping(uint256 => Notification) internal notifications;\\n    mapping(address => uint256[]) internal notificationsPerUser;\\n\\n    // purchase events\\n    event PurchaseRequested(uint256 adId, uint256 purchaseId, address buyer, bytes buyerKey);\\n    event PurchaseAccepted(uint256 adId, uint256 purchaseId, bytes encryptedDataKey);\\n    //event PurchaseChallenged(uint256 adId, uint256 purchaseId, uint256 descartesIndex);\\n    event PurchaseFinalized(uint256 adId, uint256 purchaseId, bool isSuccess);\\n\\n\\n    /**\\n    constructor(address descartesAddress) {\\n        // TODO retrieve Descartes interface from the address\\n        descartes = DescartesInterface(descartesAddress);\\n    } */\\n\\n    constructor(address payable_token) {\\n        SIMRACERCOIN = ERC20(payable_token);\\n    }\\n\\n    /// @notice creates a new advertisement for published and encrypted content\\n    function createAd(\\n        uint256 _price,                // trade price\\n        bytes32 _dataHash,             // merkle hash of unencrypted data\\n        bytes32 _encryptedDataHash,    // merkle hash of encrypted data\\n        bytes memory _ipfsPath,        // ipfs path of encrypted data\\n        bytes32 _testTemplateHash      // hash of the machine representing the test procedure for decrypted data\\n    ) internal\\n        returns (uint256 adId)          // returns ad identifier\\n    {\\n        Advertisement storage ad = ads[numAds];\\n        ad.seller = msg.sender;\\n        ad.price = _price;\\n        ad.dataHash = _dataHash;\\n        ad.encryptedDataHash = _encryptedDataHash;\\n        ad.ipfsPath = _ipfsPath;\\n        ad.testTemplateHash = _testTemplateHash;\\n\\n        adId = numAds++;\\n        adsPerSeller[ad.seller].push(adId);\\n\\n        return adId;\\n    }\\n\\n    /// @notice retrieves an advertisement given its identifier\\n    function getAd(uint256 _adId) public view\\n        returns (Advertisement memory)\\n    {\\n        return ads[_adId];\\n    }\\n\\n    /// @notice retrieves an array of advertisements given their identifiers\\n    function getAds(uint256[] memory _adIds) public view\\n        returns (Advertisement[] memory)\\n    {\\n        Advertisement[] memory ret = new Advertisement[](_adIds.length);\\n        for(uint256 i = 0; i < _adIds.length; i++) {\\n            uint256 id = _adIds[i];\\n            ret[i] = ads[id];\\n        }\\n        return ret;\\n    }\\n\\n    /// @notice returns identifiers for a seller's advertisements\\n    function listAdsPerSeller(address _seller) public view\\n        returns (uint256[] memory)\\n    {\\n        return adsPerSeller[_seller];\\n    }\\n\\n    /// @notice retrieves a purchase given its identifier\\n    function getPurchase(uint256 _purchaseId) public view virtual\\n        returns (Purchase memory)\\n    {\\n        return purchases[_purchaseId];\\n    }\\n\\n    /// @notice retrieves an advertisement given its identifier\\n    function getPurchases(uint256[] memory _purchaseIds) public view\\n        returns (Purchase[] memory)\\n    {\\n        Purchase[] memory ret = new Purchase[](_purchaseIds.length);\\n        for(uint256 i = 0; i < _purchaseIds.length; i++) {\\n            uint256 id = _purchaseIds[i];\\n            ret[i] = purchases[id];\\n        }\\n        return ret;\\n    }\\n\\n    /// @notice requests purchase of a registered advertisement\\n    function requestPurchase(\\n        uint256 adPrice,                //price as arg, cannot use msg.value if not payable\\n        uint256 _adId,                 // ad identifier\\n        bytes memory _buyerKey         // buyer's public key used for encrypting messages so that only the buyer can see\\n    ) public\\n        // funds matching ad price, which will be locked until purchase is finalized\\n        returns (uint256 purchaseId)   // returns purchase request identifier\\n    {\\n        // TODO: ensure ad exists\\n        // TODO: ensure funds are adequade\\n        Advertisement memory ad = getAd(_adId);\\n        require(adPrice == (ad.price),\\\"Amount should be equal to the item price\\\");\\n        //check if allowed to spend SRC\\n        require(SIMRACERCOIN.allowance(msg.sender, address(this)) >= ad.price, \\\"Check the token allowance\\\");\\n\\n        // stores purchase info\\n        Purchase storage purchase = purchases[numPurchases];\\n        purchase.adId = _adId;\\n        purchase.buyer = msg.sender;\\n        purchase.buyerKey = _buyerKey;\\n        purchase.date = block.timestamp;\\n\\n        purchaseId = numPurchases++;\\n        purchasesPerAd[purchase.adId].push(purchaseId);\\n\\n        //transfer SRC to the contract address\\n        require(SIMRACERCOIN.transferFrom(msg.sender, address(this), ad.price),\\\"Cannot transfer Item ownership\\\");\\n\\n        newNotification(purchaseId, \\\"Purchase was requested\\\", msg.sender, ad.seller, NotificationType.Request);\\n\\n        emit PurchaseRequested(purchase.adId, purchaseId, purchase.buyer, purchase.buyerKey);\\n        return purchaseId;\\n    }\\n\\n    /// @notice called by seller to accept a purchase request for a registered advertisement\\n    function acceptPurchase(\\n        uint256 _purchaseId,           // purchase request identifier\\n        bytes memory _encryptedDataKey // key for decrypting data, encrypted using buyer's public key\\n    ) public\\n                                // deposit sent by the seller that will be locked until purchase is finalized\\n    {\\n        // TODO...\\n\\n        Purchase storage purchase = purchases[_purchaseId];\\n        purchase.encryptedDataKey = _encryptedDataKey;\\n\\n        newNotification(_purchaseId, \\\"Thank you for your purchase. Please check item.\\\", msg.sender, purchase.buyer, NotificationType.Accept_A);\\n    \\n        emit PurchaseAccepted(purchase.adId, _purchaseId, _encryptedDataKey);\\n    }\\n\\n\\n    /// @notice called by buyer to challenge a purchase, stating that content could not be retrieved\\n    /**\\n    function challengePurchase(\\n        uint256 _purchaseId,           // purchase request identifier\\n        bytes memory _privateKey       // buyer's private key used to decrypt the data key\\n    ) public\\n        returns (uint256 descartesIndex)  // returns index of the descartes computation that will verify the challenge\\n    {\\n        // TODO...\\n\\n        Purchase memory purchase = getPurchase(_purchaseId);\\n        Advertisement memory ad = getAd(purchase.adId);\\n\\n        newNotification(_purchaseId, \\\"Purchase was challenged\\\", msg.sender, ad.seller, NotificationType.Challenge);\\n\\n        emit PurchaseChallenged(purchase.adId, _purchaseId, descartesIndex);\\n        return descartesIndex;\\n    }*/\\n\\n    /// @notice finalizes purchase, unlocking buyer's funds and seller's deposit as appropriate\\n    function finalizePurchase(\\n        uint256 _purchaseId,            // purchase request identifier\\n        bool isSuccess\\n    ) public {\\n        Purchase memory purchase = getPurchase(_purchaseId);\\n        Advertisement memory ad = getAd(purchase.adId);\\n\\n        address accountAddress = isSuccess ? ad.seller : purchase.buyer;\\n\\n        require(SIMRACERCOIN.transferFrom(address(this), accountAddress, ad.price),\\\"Cannot unlock funds to transfer ownership\\\");\\n        //accountAddress.transfer(ad.price);\\n\\n        if(isSuccess) {\\n            newNotification(_purchaseId, \\\"Purchase was accepted.\\\", msg.sender, ad.seller, NotificationType.Accept_B);\\n        }\\n        else {\\n            newNotification(_purchaseId, \\\"Purchase was rejected.\\\", msg.sender, ad.seller, NotificationType.Reject);\\n        }\\n\\n        emit PurchaseFinalized(purchase.adId, _purchaseId, isSuccess); \\n    }\\n\\n    // @notice create notification\\n    function newNotification(\\n        uint256 _purchaseId,           // purchase request identifier\\n        string memory _message,        // generic message\\n        address _sender,               // who sends the message\\n        address _receiver,             // who receives the message\\n        NotificationType _type         // type of notification\\n    ) internal\\n        returns (uint256 notificationId)           // returns notification identifier\\n    {\\n        Notification storage notification = notifications[numNotifications];\\n        notification.purchaseId = _purchaseId;\\n        notification.message = _message;\\n        notification.nType = _type;\\n        notification.archive = false;\\n        notification.date = block.timestamp;\\n        notification.sender = _sender;\\n        notification.receiver = _receiver;\\n\\n        notificationId = numNotifications++;\\n        //notificationsPerSeller[ads[purchases[_purchaseId].adId].seller].push(notificationId);\\n        notificationsPerUser[_receiver].push(notificationId);\\n\\n        return notificationId;\\n    }\\n\\n    /// @notice retrieves an array of notifications given their identifiers\\n    function getNotifications(uint256[] memory _notificationIds) public view\\n        returns (Notification[] memory)\\n    {\\n        Notification[] memory ret = new Notification[](_notificationIds.length);\\n        for(uint256 i = 0; i < _notificationIds.length; i++) {\\n            uint256 id = _notificationIds[i];\\n            ret[i] = notifications[id];\\n        }\\n        return ret;\\n    }\\n\\n    /// @notice returns identifiers for a seller's notifications\\n    function listNotificationsPerUser(address _user) public view\\n        returns (uint256[] memory)\\n    {\\n        return notificationsPerUser[_user];\\n    }\\n\\n    function archiveNotification(uint256 _notificationId) public {\\n        notifications[_notificationId].archive = true;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xd826b2cf222a776411e6c89a2cbe4fe02cd4a75fe72c5aa956c5e3c5eec74fed\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptPurchase(uint256,bytes)": {
        "notice": "called by seller to accept a purchase request for a registered advertisement"
      },
      "constructor": {
        "notice": "constructor(address descartesAddress) { // TODO retrieve Descartes interface from the address descartes = DescartesInterface(descartesAddress); } "
      },
      "finalizePurchase(uint256,bool)": {
        "notice": "finalizes purchase, unlocking buyer's funds and seller's deposit as appropriate"
      },
      "getAd(uint256)": {
        "notice": "retrieves an advertisement given its identifier"
      },
      "getAds(uint256[])": {
        "notice": "retrieves an array of advertisements given their identifiers"
      },
      "getNotifications(uint256[])": {
        "notice": "retrieves an array of notifications given their identifiers"
      },
      "getPurchase(uint256)": {
        "notice": "retrieves a purchase given its identifier"
      },
      "getPurchases(uint256[])": {
        "notice": "retrieves an advertisement given its identifier"
      },
      "listAdsPerSeller(address)": {
        "notice": "returns identifiers for a seller's advertisements"
      },
      "listNotificationsPerUser(address)": {
        "notice": "returns identifiers for a seller's notifications"
      },
      "requestPurchase(uint256,uint256,bytes)": {
        "notice": "requests purchase of a registered advertisement"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3360,
        "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
        "label": "SIMRACERCOIN",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ERC20)903"
      },
      {
        "astId": 3408,
        "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
        "label": "numAds",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3412,
        "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
        "label": "ads",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Advertisement)3373_storage)"
      },
      {
        "astId": 3417,
        "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
        "label": "adsPerSeller",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3420,
        "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
        "label": "numPurchases",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3424,
        "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
        "label": "purchases",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Purchase)3384_storage)"
      },
      {
        "astId": 3429,
        "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
        "label": "purchasesPerAd",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3432,
        "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
        "label": "numNotifications",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3436,
        "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
        "label": "notifications",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Notification)3405_storage)"
      },
      {
        "astId": 3441,
        "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
        "label": "notificationsPerUser",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20)903": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_enum(NotificationType)3390": {
        "encoding": "inplace",
        "label": "enum ContentMarketplace.NotificationType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Advertisement)3373_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ContentMarketplace.Advertisement)",
        "numberOfBytes": "32",
        "value": "t_struct(Advertisement)3373_storage"
      },
      "t_mapping(t_uint256,t_struct(Notification)3405_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ContentMarketplace.Notification)",
        "numberOfBytes": "32",
        "value": "t_struct(Notification)3405_storage"
      },
      "t_mapping(t_uint256,t_struct(Purchase)3384_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ContentMarketplace.Purchase)",
        "numberOfBytes": "32",
        "value": "t_struct(Purchase)3384_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Advertisement)3373_storage": {
        "encoding": "inplace",
        "label": "struct ContentMarketplace.Advertisement",
        "members": [
          {
            "astId": 3362,
            "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 3364,
            "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3366,
            "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
            "label": "dataHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 3368,
            "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
            "label": "encryptedDataHash",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 3370,
            "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
            "label": "ipfsPath",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes_storage"
          },
          {
            "astId": 3372,
            "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
            "label": "testTemplateHash",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Notification)3405_storage": {
        "encoding": "inplace",
        "label": "struct ContentMarketplace.Notification",
        "members": [
          {
            "astId": 3392,
            "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
            "label": "purchaseId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3394,
            "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
            "label": "message",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3396,
            "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
            "label": "nType",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(NotificationType)3390"
          },
          {
            "astId": 3398,
            "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
            "label": "archive",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 3400,
            "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
            "label": "date",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3402,
            "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
            "label": "sender",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 3404,
            "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
            "label": "receiver",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Purchase)3384_storage": {
        "encoding": "inplace",
        "label": "struct ContentMarketplace.Purchase",
        "members": [
          {
            "astId": 3375,
            "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
            "label": "adId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3377,
            "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
            "label": "buyer",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 3379,
            "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
            "label": "buyerKey",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 3381,
            "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
            "label": "encryptedDataKey",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          },
          {
            "astId": 3383,
            "contract": "cache/solpp-generated-contracts/ContentMarketplace.sol:ContentMarketplace",
            "label": "date",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}